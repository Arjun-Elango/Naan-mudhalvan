import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Load the dataset from a CSV file
file_path = 'E:/Sustainable-Urban-Planning-AI/energy_data.csv'  # Replace with your actual CSV file path
energy_data = pd.read_csv(file_path)

# Data Preprocessing
energy_data['date'] = pd.to_datetime(energy_data['date'])
energy_data.set_index('date', inplace=True)

# Feature Engineering
# Adding day of the week as a feature
energy_data['day_of_week'] = energy_data.index.dayofweek
# Adding previous day's consumption
energy_data['prev_consumption'] = energy_data['consumption'].shift(1)

# Drop rows with NaN values (due to the shift)
energy_data.dropna(inplace=True)

# Exploratory Data Analysis
plt.figure(figsize=(12, 6))
plt.plot(energy_data.index, energy_data['consumption'], label='Energy Consumption', color='orange')
plt.title('Daily Energy Consumption Over Time')
plt.xlabel('Date')
plt.ylabel('Consumption (kWh)')
plt.legend()
plt.show()

# Prepare data for modeling
X = energy_data[['temperature', 'solar_radiation', 'day_of_week', 'prev_consumption']]  # Features
y = energy_data['consumption']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Set up the Random Forest Regressor
model = RandomForestRegressor()

# Set up the parameter grid for Grid Search
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Set up the Grid Search
grid_search = GridSearchCV(estimator=model, param_grid=param_grid,
                           cv=3, n_jobs=-1, verbose=2)

# Fit the model with Grid Search
grid_search.fit(X_train, y_train)

# Best parameters from Grid Search
print(f'Best parameters: {grid_search.best_params_}')

# Make predictions with the best model
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'Mean Absolute Error: {mae:.2f}')

# Compare predicted vs actual values
plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test, label='Actual Consumption', color='blue')
plt.plot(y_test.index, y_pred, label='Predicted Consumption', linestyle='--', color='red')
plt.title('Actual vs Predicted Energy Consumption')
plt.xlabel('Date')
plt.ylabel('Consumption (kWh)')
plt.legend()
plt.show()

# Recommendations for Sustainable Urban Planning
average_consumption = energy_data['consumption'].mean()
print(f'Average Daily Consumption: {average_consumption:.2f} kWh')
print("Recommendations:")
print("- Consider integrating solar energy systems where solar radiation is highest.")
print("- Analyze building energy efficiency to reduce overall consumption.")
